var path     = require('path')
  , fs       = require('fs-extra')
  , chai     = require('chai')
  , should   = require('chai').should()
  , chaifs   = require('chai-fs')
  , Skeleton = require('../../lib')

chai.use(chaifs)
chai.should();



describe('Skeleton', function() {

  var scope = {
    generator : __dirname + '/../fixtures/',
    dest      : './.tests/integration/'
  };

  describe('Adding and changing data and scope values', function() {

    var sk;

    before(function() {
      sk = new Skeleton(scope, { testing: 'data' });
    });

    it('should change allowed scope properties', function() {
      sk.scope('testing', 'value');
      sk.scope('testing').should.be.equal('value');
    });

    it('should avoid changes in some protected scope properties', function() {
      chai.expect(function() {
        sk.scope('generator', 'change');
      }).to.throw();
    });

    it('should retrieve predefined data', function() {
      sk.data('testing').should.be.equal('data')
    });

    it('should change data object', function() {
      sk.data('testing', 'data2');
      sk.data('testing').should.be.equal('data2');
    });

    it('should add new data', function() {
      sk.data('testing-new', 'new-data');
      sk.data('testing-new').should.be.equal('new-data');
    });

  });

  describe('Shortcut', function() {

    it('should create skeleton with shortcut', function(done) {

      var sk;

      sk = new Skeleton(scope.generator);

      sk.scope('dest', scope.dest);

      sk.create()
        .then(function() {
          done();
        })
        .catch(function(err) {
          done(err);
        })
      ;

    });


  });

  describe('With defaults', function() {

    var sk;

    before(function(done) {

      sk = new Skeleton(scope);

      sk.create()
        .then(function() {
          done();
        })
        .catch(function(err) {
          done(err);
        })
      ;

    });

    it('should create manifest with defaults', function() {
      path.join(scope.dest, 'app/').should.be.a.directory().not.empty;
      path.join(scope.dest, 'app/unnamed').should.be.a.directory().empty;
    });

    it('should not create dynamic scaffold in `before`', function() {
      var scaffold = sk.getScaffold();

      should.not.exist(scaffold['app/components/component1.txt']);
      should.not.exist(scaffold['app/components/component2.txt']);
    });

  });

  describe('Overriding defaults', function() {

    var sk;

    before(function(done) {

      sk = new Skeleton(scope, {
        name       : 'license',
        components : ['component1', 'component2']
      });

      sk.create()
        .then(function() {
          done();
        })
        .catch(function(err) {
          done(err)
        })
      ;

    });

    it('should use data object in file config', function() {
      path.join(scope.dest, 'app/README.md').should.have.content('hello world!\n', 'Template failed');
    });

    it('should use overriden data', function() {
      path.join(scope.dest, 'app/LICENSE.md').should.have.content('license\n', 'Template failed');
      path.join(scope.dest, 'app/license').should.be.a.directory().empty;
    });

    it('should change scaffold with `before` function', function() {
      var scaffold = sk.getScaffold();

      should.exist(scaffold['app/components/component1.txt']);
      should.exist(scaffold['app/components/component2.txt']);
    });

    it('should have dynamic files generated by `before`', function() {
      path.join(scope.dest, 'app/components/component1.txt').should.have.content('Component: component1\n', 'Template failed');
      path.join(scope.dest, 'app/components/component2.txt').should.have.content('Component: component2\n', 'Template failed');
    });

  });

});
